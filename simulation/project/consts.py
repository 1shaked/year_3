import random

ROUND_DECIMAL_PLACES = 2  # Number of decimal places for rounding prices and costs

SIMULATION_DAYS = 600
SUPPLIER_COUNT_MIN = 2
SUPPLIER_COUNT_MAX = 6
CUSTOMER_COUNT_MIN = 5
CUSTOMER_COUNT_MAX = 12
SUPPLIER_LEAD_TIME_MIN = 3.0
SUPPLIER_LEAD_TIME_MAX = 7.0
SUPPLIER_ORDER_COST_MIN = 20.0
SUPPLIER_ORDER_COST_MAX = 60.0
CUSTOMER_LEAD_TIME_MIN = 1.0
CUSTOMER_LEAD_TIME_MAX = 5.0
CUSTOMER_ORDER_COST_MIN = 10.0
CUSTOMER_ORDER_COST_MAX = 30.0
WORKING_DAY_LENGTH = 8   # 8 hours
STATION_PROCESS_TIME = {
    1: round((random.random() + 0.02), ROUND_DECIMAL_PLACES),  # Station 1 min/max
    2: round((random.random() + 0.02), ROUND_DECIMAL_PLACES),  # Station 2 min/max
    3: round((random.random() + 0.02), ROUND_DECIMAL_PLACES),  # Station 3 min/max
}

MIN_PROCESSING_TIME = 0.8  # Minimum processing time for a product about 10% of the working day

PRODUCT_ID_X = 'x'
PRODUCT_ID_Y = 'y'
PRODUCT_ID_Z = 'z'
PRODUCT_ID_FIRST = 'A'  # Product type 1
PRODUCT_ID_SECOND = 'B'  # Product type 2
PRODUCT_VOLUME = {
    PRODUCT_ID_FIRST: 1.0,
    PRODUCT_ID_SECOND: 1.5,
    PRODUCT_ID_X: 2.0,  # Product x has a different volume
    PRODUCT_ID_Y: 1.2,  # Product y has a different volume
    PRODUCT_ID_Z: 1.8,  # Product z has a different volume
}

'''
v = {
            self.product_one: {(self.product_x, 1), (self.product_y, 1), (self.product_z, 0.75)},
            self.product_two: {(self.product_x, 1), (self.product_y, 1), (self.product_z, 0.75)},
        }
'''
FACTOR_PRODUCT_ONE = 1
FACTOR_PRODUCT_TWO = 1

FACTOR_DICT = {
    PRODUCT_ID_FIRST: FACTOR_PRODUCT_ONE,
    PRODUCT_ID_SECOND: FACTOR_PRODUCT_TWO,
}

CUSTOMER_PROBABILITY_TO_ORDER = 0.6  # 60% chance to place an order of some item each day (P(order_one) = P(order_two)  and they are independent)
RAW_MATERIAL_COST = {
    PRODUCT_ID_X: [6.0, 8.0],  
    PRODUCT_ID_Y: [8.0, 10.0], 
    PRODUCT_ID_Z: [9.0, 11.0], 
}
CUSTOMER_MIN_ORDER_QUANTITY = 3
CUSTOMER_MAX_ORDER_QUANTITY = 15
STATUS_WAITING_MACHINE = "waiting"
STATUS_PROCESSING_MACHINE = "processing"
STATUS_COMPLETED_MACHINE = "completed"
INVENTORY_CAPACITY_LIMIT = 100_000_000_0.0  # Example capacity limit for inventory
HOLDING_COST_PER_UNIT = 1.0  # Example holding cost per unit
# Base inventory constants for each product
PRODUCT_ONE_BASE_INVENTORY_LOW = 1
PRODUCT_ONE_BASE_INVENTORY_HIGH = 10
PRODUCT_TWO_BASE_INVENTORY_LOW = 1
PRODUCT_TWO_BASE_INVENTORY_HIGH = 10
PRODUCT_X_BASE_INVENTORY_LOW = 1
PRODUCT_X_BASE_INVENTORY_HIGH = 10
PRODUCT_Y_BASE_INVENTORY_LOW = 1
PRODUCT_Y_BASE_INVENTORY_HIGH = 10
PRODUCT_Z_BASE_INVENTORY_LOW = 1
PRODUCT_Z_BASE_INVENTORY_HIGH = 10
STATION_ONE_ID = 1
STATION_TWO_ID = 2
STATION_THREE_ID = 3

PRODUCT_ID_TO_STATION_ID = {
    PRODUCT_ID_X: STATION_ONE_ID,
    PRODUCT_ID_Y: STATION_TWO_ID,
    PRODUCT_ID_Z: STATION_THREE_ID,
}
STATION_PROCESSING_TIME_LAMBDA = {
    PRODUCT_ID_X: {
        PRODUCT_ID_FIRST: 1,
        PRODUCT_ID_SECOND: 0.5,
    },
    PRODUCT_ID_Y: {
        PRODUCT_ID_FIRST: 1,
        PRODUCT_ID_SECOND: 0.5,
    },
    PRODUCT_ID_Z: {
        PRODUCT_ID_FIRST: 2,
        PRODUCT_ID_SECOND: 0.75,
    },
}

PRODUCT_A_MIN_PRICE = 14.0
PRODUCT_A_MAX_PRICE = 16.0
PRODUCT_B_MIN_PRICE = 18.0
PRODUCT_B_MAX_PRICE = 20.0


INGREDIENTS_WAITING = 'WAITING'
INGREDIENTS_ORDERED = 'INGREDIENTS_ORDERED'
INGREDIENTS_READY_TO_PROCESS = 'READY_TO_PROCESS'
INGREDIENTS_PROCESSED = 'PROCESSED'
ORDER_FULFILLED = 'ORDER_FULFILLED'

ORDER_PREPARED = 'PREPARED'
ORDER_IN_STOCK = 'IN_STOCK'
ORDER_NOT_READY_YET = 'NOT_READY_YET'

ALGORITHM_EDD = 'ALGORITHM_EDD'
ALGORITHM_SPT = 'ALGORITHM_SPT'
ALGORITHM_LPT = 'ALGORITHM_LPT'
ALGORITHM_SLACK = 'ALGORITHM_SLACK'
ALGORITHM_CRITICAL_RATIONAL = 'ALGORITHM_CRITICAL_RATIONAL'
ALGORITHM_SORTING_OPTIONS = [
    ALGORITHM_EDD,
    ALGORITHM_SPT,
    ALGORITHM_LPT,
    ALGORITHM_SLACK,
    ALGORITHM_CRITICAL_RATIONAL,
]

# ALGORITHM_FCFS = 'ALGORITHM_FCFS'
# ALGORITHM_LPT = 'ALGORITHM_LPT'
# ALGORITHM_CUSTOM = 'ALGORITHM_CUSTOM'

DATA_FOLDER = 'data'

RECIPE_KEY = 'RECIPE_KEY'
SUPPLIER_KEY = 'SUPPLIER_KEY'
SIMULATION_DAYS_KEY = 'SIMULATION_DAYS_KEY'
STATIONS_KEY = 'STATIONS_KEY'

INVENTORY_KEY = 'INVENTORY_KEY'
ALGORITHM_KEY = 'ALGORITHM_KEY'
INITIAL_PRODUCTS_KEY = 'INITIAL_PRODUCTS_KEY'

SIMULATION_DAYS_ARRAY_KEY = 'SIMULATION_DAYS_ARRAY_KEY'
DAY_KEY = 'DAY_KEY'
CUSTOMER_ORDERS_KEY = 'CUSTOMER_ORDERS_KEY'
SUPPLIER_ORDERS_KEY = 'SUPPLIER_ORDERS_KEY'
NEEDED_INGREDIENTS_KEY = 'NEEDED_INGREDIENTS_KEY'
CLOSEST_ORDER_KEY = 'CLOSEST_ORDER_KEY'
CURRENT_DAY_TIME_KEY = 'CURRENT_DAY_TIME_KEY'
TYPE_ORDER_IN_STOCK = 'ORDER_IN_STOCK'
TYPE_COMPONENTS_NOT_IN_STOCK = 'COMPONENTS_NOT_IN_STOCK'
TYPE_ADD_INGREDIENTS_TO_STATION = 'ADD_INGREDIENTS_TO_STATION'
TYPE_STATION_PROCESSING_TIME = 'STATION_PROCESSING_TIME'
TYPE_DAYS_ACTION_DATA = 'DAYS_ACTION_DATA'
ORDER_FULFILLED_FROM_WORKING_DAY_START = 'ORDER_FULFILLED_FROM_WORKING_DAY_START'
ORDER_FULFILLED_FROM_WORKING_DAY_END = 'ORDER_FULFILLED_FROM_WORKING_DAY_END'
TYPE_SET_CLOSEST_ORDER = 'SET_CLOSEST_ORDER'
TYPE_TOTAL_INCOME = 'TOTAL_INCOME'
TYPE_ORDER_FULFILLED_LIST = 'ORDER_FULFILLED_LIST'
TYPE_GET_NEXT_ORDER_BY_KEY = 'GET_NEXT_ORDER_BY_KEY'
TYPE_PROCESSING_TIME_DISTRIBUTIONS = 'PROCESSING_TIME_DISTRIBUTIONS'
TYPE_PROCESSING_TIME_PER_ORDER = 'PROCESSING_TIME_PER_ORDER'


GET_NEXT_ORDER_BY_DUE_DATE = 'GET_NEXT_ORDER_BY_DUE_DATE'
GET_NEXT_ORDER_BY_PRICE = 'GET_NEXT_ORDER_BY_PRICE'
GET_NEXT_ORDER_OPTIONS = [
    GET_NEXT_ORDER_BY_DUE_DATE,
    GET_NEXT_ORDER_BY_PRICE,
]

STATION_VOLUME = {
    STATION_ONE_ID: 200.0,  # Example volume capacity for station 1
    STATION_TWO_ID: 200.0,  # Example volume capacity for station 2
    STATION_THREE_ID: 500.0,  # Example volume capacity for station 3
}
TYPE_PROBABILITY_TO_ORDER = 'PROBABILITY_TO_ORDER'

DAY_FINE_PERCENTAGE = 0.95  # 5% fine for delayed orders
TYPE_FINE_DELAYED_PERCENTAGE = 'FINE_DELAYED_ORDERS'

HOLDING_COST_PER_UNIT = 1.0  # Example holding cost per unit
MAX_PREVIOUS_ORDERS = 5  # Maximum number of previous orders to keep track of
TYPE_HOLDING_COST_PER_UNIT = 'HOLDING_COST_PER_UNIT'

EXTRA_INGREDIENTS_ORDERED_FACTOR = 1.2 # Factor for extra ingredients ordered